diff --git a/bin/tests/BadConfigFormatException.class b/bin/tests/BadConfigFormatException.class
index 240c158..e2923df 100644
Binary files a/bin/tests/BadConfigFormatException.class and b/bin/tests/BadConfigFormatException.class differ
diff --git a/bin/tests/Board.class b/bin/tests/Board.class
index 9ca84b0..7c3abc4 100644
Binary files a/bin/tests/Board.class and b/bin/tests/Board.class differ
diff --git a/bin/tests/BoardCell.class b/bin/tests/BoardCell.class
index 7de16a1..e572262 100644
Binary files a/bin/tests/BoardCell.class and b/bin/tests/BoardCell.class differ
diff --git a/bin/tests/FileInitTests.class b/bin/tests/FileInitTests.class
index d17c5c8..1e59712 100644
Binary files a/bin/tests/FileInitTests.class and b/bin/tests/FileInitTests.class differ
diff --git a/bin/tests/Room.class b/bin/tests/Room.class
index 56e53b0..ca0e918 100644
Binary files a/bin/tests/Room.class and b/bin/tests/Room.class differ
diff --git a/data/ClueSetup.txt b/data/ClueSetup.txt
index 1f91f8f..bde1be5 100644
--- a/data/ClueSetup.txt
+++ b/data/ClueSetup.txt
@@ -1,13 +1,13 @@
 // Rooms and room cards
 Room, Statistics, S
-Room, SoftwareEngineering, E
+Room, Software Engineering, E
 Room, Discrete, D
-Room, LinearAlgebra, L
+Room, Linear Algebra, L
 Room, Probability, P
-Room, GameDevelopment, G
-Room, DatabaseMana, M
+Room, Game Development, G
+Room, Database Management, M
 Room, Chemistry, C
 Room, Physics, H
 // other spaces on board
 Space, Unused, X
-Space Walkway, W
\ No newline at end of file
+Space, Walkway, W
\ No newline at end of file
diff --git a/gitlog.txt b/gitlog.txt
index f147093..e31af15 100644
--- a/gitlog.txt
+++ b/gitlog.txt
@@ -1,5 +1,24 @@
-I, Dawson Matthews, certify that I participated equitably in the creation of assignment C14A-1 Clue Paths 2 (Clue Pair) dated 03/02/2023.
-I, Connor Bendle, certify that I participated equitably in the creation of this assignment C14A-1 Clue Paths 2 (Clue Pair), dated 03/02/2023.
+I, Dawson Matthews, certify that I participated equitably in the creation of assignment C15A-1 Clue Paths 2 (Clue Pair) dated 03/06/2023.
+I, Connor Bendle, certify that I participated equitably in the creation of this assignment C15A-1 Clue Paths 2 (Clue Pair), dated 03/06/2023.
+
+
+commit 84e0cfc7824c95ed9625a5eaa91b40e831894815
+Author: Dawson Matthews <=>
+Date:   Mon Mar 6 18:53:07 2023 -0700
+
+    Passes setup tests and exception tests.
+
+commit a9d3c7e47db72d93ebc66117b6b1af82518d67fa
+Author: Dawson Matthews <=>
+Date:   Thu Mar 2 14:50:12 2023 -0700
+
+    Fixed all tests, added test.txt file
+
+commit 4a69e2c2461165143b677d004080887ecf94e1ee
+Author: Dawson Matthews <dawsonmatthews@mines.edu>
+Date:   Thu Mar 2 13:46:11 2023 -0700
+
+    Added Board, BoardCell, DoorDirection. Added incomplete tests
 
 commit f6778e9018725945fe1800c231f3cc50fb0e1e47
 Author: Dawson Matthews <dawsonmatthews@mines.edu>
diff --git a/src/tests/BadConfigFormatException.java b/src/tests/BadConfigFormatException.java
index ce804ff..e0f6f0b 100644
--- a/src/tests/BadConfigFormatException.java
+++ b/src/tests/BadConfigFormatException.java
@@ -4,6 +4,13 @@ public class BadConfigFormatException extends Exception {
 
 	public BadConfigFormatException() {
 		// TODO Auto-generated constructor stub
+		super("Config format file:  \n Status: bad (not usable)");
+	}
+	
+	public BadConfigFormatException(String fileName) {
+		// TODO Auto-generated constructor stub
+		super(fileName + " Bad");
 	}
 
+	
 }
diff --git a/src/tests/Board.java b/src/tests/Board.java
index d7a8362..5a27e62 100644
--- a/src/tests/Board.java
+++ b/src/tests/Board.java
@@ -4,16 +4,22 @@ import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 
+import java.io.FileNotFoundException;
+import java.io.FileReader;
+import java.util.ArrayList;
+import java.util.HashMap;
 import java.util.HashSet;
+import java.util.Map;
+import java.util.Scanner;
 import java.util.Set;
 
 public class Board {
 
-	private final static int COLUMNS = 24;
-	private final static int ROWS = 24;
+	private static int COLUMNS = 24;
+	private static int ROWS = 24;
 	private String layoutConfigFile = "ClueLayout.csv";
 	private String setupConfigFile = "ClueSetup.txt";
-	//Map<Character, Room>roomMap;
+	Map<Character, Room> roomMap;
 	private static Board theInstance = new Board();
 	
 	private BoardCell[][] griddy;
@@ -22,7 +28,6 @@ public class Board {
 	
 	private Board() {
 		super();
-		
 	}
 	
 	// this method returns the only Board
@@ -30,6 +35,7 @@ public class Board {
     	return theInstance;
     }
 
+    // Adds all targets with a length of pathLength to the targets list.
 	void calcTargets(BoardCell startCell, int pathLength) {
 		visited = new HashSet<BoardCell>();
 		targets = new HashSet<BoardCell>();
@@ -37,6 +43,7 @@ public class Board {
 		findAllTargets(startCell, pathLength);
 	}
 	
+	
 	private void findAllTargets(BoardCell thisCell, int numSteps) {
 		for (BoardCell cell : thisCell.getAdjList()) {
 			if (visited.contains(cell) || cell.getOccupied()) {
@@ -64,52 +71,183 @@ public class Board {
 		return griddy[row][column];
 	}
 	
+	/*
+	 * loads the setup file
+	 * loads the layout file
+	 * adds all adjacent cells to each cell.
+	 */
 	public void initialize() {
-		griddy = new BoardCell[ROWS][COLUMNS];
-		for (int i = 0; i < ROWS; i++) {
-			for (int j = 0; j < COLUMNS; j++) {
-				BoardCell newCell = new BoardCell(i, j);
-				griddy[i][j] = newCell;
-			}
+				
+		try {
+			loadSetupConfig();
+		}
+		catch(FileNotFoundException e) {
+			System.out.println("HELP ME");
+			return;
+		}
+		catch(BadConfigFormatException e) {
+			System.out.println(e.getMessage());
+			return;
+		}
+		
+		try {
+			loadLayoutConfig();
+		}
+		catch(FileNotFoundException e) {
+			System.out.println("HELP ME!");
+			return;
+		}
+		catch(BadConfigFormatException e) {
+			System.out.println(e.getMessage());
+			return;
 		}
 		
 		for (int i = 0; i < ROWS; i++) {
 			for (int j = 0; j < COLUMNS; j++) {
-				if (i+1 < ROWS) {
-					griddy[i][j].addAdjacency(griddy[i+1][j]);
-				}
-				if (i-1 >= 0) {
-					griddy[i][j].addAdjacency(griddy[i-1][j]);
-				}
-				if (j+1 < COLUMNS) {
-					griddy[i][j].addAdjacency(griddy[i][j+1]);
+				for (int k = -1; k < 1; k+= 2) {
+					if (i+k < ROWS && i+k >= 0) {
+						griddy[i][j].addAdjacency(griddy[i+k][j]);
+					}
 				}
-				if (j-1 >= 0) {
-					griddy[i][j].addAdjacency(griddy[i][j-1]);
+				for (int k = -1; k < 1; k+=2) {
+					if (j+k < COLUMNS && j+k >= 0) {
+						griddy[i][j].addAdjacency(griddy[i][j+k]);
+					}
 				}
 			}
 		}
 	}
 	
-	public void loadSetupConfig() {
+	/*
+	 * Creates the map of rooms
+	 */
+	public void loadSetupConfig() throws FileNotFoundException, BadConfigFormatException{
+		roomMap = new HashMap<Character, Room>();
+
+		FileReader reader = new FileReader("data/" + setupConfigFile);
+		Scanner in = new Scanner(reader);
 		
+		while (in.hasNextLine()) {
+			String roomInfo = in.nextLine();
+			if (roomInfo.charAt(0) == '/') {
+				continue;
+			}
+			
+			String[] infoArray = roomInfo.split(", ");
+			
+			// If anything is written other than 'Room' or 'Space', throw an exception
+			if (!infoArray[0].equals("Room") && !infoArray[0].equals("Space")) {
+				throw new BadConfigFormatException();
+			}
+			
+			Room newRoom = new Room(infoArray[1]);
+			char roomChar = infoArray[2].charAt(0);
+			roomMap.put(roomChar, newRoom);
+			
+		}
+		
+		in.close();
 	}
 	
-	public void loadLayoutConfig() {
+	/*
+	 * Read in all cells from the file, add them to the grid
+	 */
+	public void loadLayoutConfig() throws FileNotFoundException, BadConfigFormatException {
+		ArrayList<String []> rowList = new ArrayList<String[]>();
+		FileReader reader = new FileReader("data/" + layoutConfigFile);
+		Scanner in = new Scanner(reader);
+		
+		int previousRowSize = -1;
+		
+		while (in.hasNextLine()) {
+			String rowString = in.nextLine();
+			String[] rowArray = rowString.split(",");
+			
+			// If a row size is different from the previous row size, throw an exception
+			if (previousRowSize != -1) {
+				if (previousRowSize != rowArray.length) {
+					throw new BadConfigFormatException();
+				}
+			}
+			previousRowSize = rowArray.length;
+			
+			rowList.add(rowArray);
+		}
+		
+		in.close();
 		
+		ROWS = rowList.size();
+		COLUMNS = rowList.get(0).length;
+		griddy = new BoardCell[ROWS][COLUMNS];
+		for (int i = 0; i < ROWS; i++) {
+			for (int j = 0; j < COLUMNS; j++) {
+				
+				BoardCell newCell = new BoardCell(i, j);
+				if (roomMap.containsKey(rowList.get(i)[j].charAt(0))){
+					// TODO: decide when is room
+					newCell.setRoom(true);
+				}
+				else {
+					throw new BadConfigFormatException();
+				}
+				
+				newCell.setInitial(rowList.get(i)[j].charAt(0));
+				
+				
+				newCell.setDoorDirection(DoorDirection.NONE);
+				newCell.setLabel(false);
+				newCell.setCenter(false);
+				newCell.setSecretPassage(' ');
+
+				if(rowList.get(i)[j].length() == 2) {
+					if(rowList.get(i)[j].charAt(1) == '<') {
+						newCell.setDoorDirection(DoorDirection.LEFT);
+					}
+					else if(rowList.get(i)[j].charAt(1) == '>') {
+						newCell.setDoorDirection(DoorDirection.RIGHT);
+					}
+					else if(rowList.get(i)[j].charAt(1) == 'v') {
+						newCell.setDoorDirection(DoorDirection.DOWN);
+					}
+					else if(rowList.get(i)[j].charAt(1) == '^') {
+						newCell.setDoorDirection(DoorDirection.UP);
+					}
+					
+					if(rowList.get(i)[j].charAt(1) == '#') {
+						newCell.setLabel(true);
+						roomMap.get(rowList.get(i)[j].charAt(0)).setLabelCell(newCell);
+					}
+					
+					if(rowList.get(i)[j].charAt(1) == '*') {
+						newCell.setCenter(true);
+						roomMap.get(rowList.get(i)[j].charAt(0)).setCenterCell(newCell);
+					}
+					
+					// If the second letter is A-Z
+					if (rowList.get(i)[j].charAt(1) >= 'A' && rowList.get(i)[j].charAt(1) <= 'Z') {
+						newCell.setSecretPassage(rowList.get(i)[j].charAt(1));
+					}
+					
+					
+				}
+				
+				griddy[i][j] = newCell;
+			}
+		}
 	}
 	
 	Set<BoardCell> getTargets() {
 		return targets;
 	}
 
-	public void setConfigFiles(String string, String string2) {
-		
+	public void setConfigFiles(String layoutName, String setupName) {
+		layoutConfigFile = layoutName;
+		setupConfigFile = setupName;
 	}
 
 	public Room getRoom(char c) {
 		// TODO Auto-generated method stub
-		return new Room();
+		return roomMap.get(c);
 	}
 
 	public int getNumRows() {
@@ -124,8 +262,6 @@ public class Board {
 
 	public Room getRoom(BoardCell cell) {
 		// TODO Auto-generated method stub
-		return new Room();
+		return roomMap.get(cell.getInitial());
 	}
-	
-	
 }
diff --git a/src/tests/BoardCell.java b/src/tests/BoardCell.java
index 765e5ea..674bad0 100644
--- a/src/tests/BoardCell.java
+++ b/src/tests/BoardCell.java
@@ -48,29 +48,58 @@ public class BoardCell {
 	boolean getOccupied() {
 		return isOccupied;
 	}
-
+	
 	public boolean isDoorway() {
-		// TODO Auto-generated method stub
-		return false;
+		if (doorDirection == DoorDirection.NONE) {
+			return false;
+		}
+		else {
+			return true;
+		}
 	}
 
 	public DoorDirection getDoorDirection() {
 		// TODO Auto-generated method stub
-		return null;
+		return doorDirection;
+	}
+	
+	public void setDoorDirection(DoorDirection direction) {
+		// TODO Auto-generated method stub
+		this.doorDirection = direction;
 	}
 
 	public boolean isLabel() {
 		// TODO Auto-generated method stub
-		return false;
+		return roomLabel;
+	}
+	
+	public void setLabel(boolean roomLabel) {
+		this.roomLabel = roomLabel;
 	}
 
 	public boolean isRoomCenter() {
 		// TODO Auto-generated method stub
-		return false;
+		return roomCenter;
+	}
+	
+	public void setCenter(boolean center) {
+		this.roomCenter = center;
 	}
 
+	public void setSecretPassage(char destinationChar) {
+		this.secretPassage = destinationChar;
+	}
+	
 	public char getSecretPassage() {
 		// TODO Auto-generated method stub
-		return 0;
+		return secretPassage;
+	}
+
+	public char getInitial() {
+		return initial;
+	}
+	
+	public void setInitial(char initial) {
+		this.initial = initial;
 	}
 }
diff --git a/src/tests/FileInitTests.java b/src/tests/FileInitTests.java
index 2c1c6ac..5573c3c 100644
--- a/src/tests/FileInitTests.java
+++ b/src/tests/FileInitTests.java
@@ -9,8 +9,8 @@ package tests;
 import static org.junit.Assert.*;
 
 import org.junit.Assert;
-import org.junit.Test;
 import org.junit.jupiter.api.BeforeAll;
+import org.junit.jupiter.api.Test;
 
 public class FileInitTests {
 	// Constants that I will use to test whether the file was loaded correctly
@@ -41,7 +41,7 @@ public class FileInitTests {
 		assertEquals("Discrete", board.getRoom('D').getName() );
 		assertEquals("Linear Algebra", board.getRoom('L').getName() );
 		assertEquals("Probability", board.getRoom('P').getName() );
-		assertEquals("GameDevelopment", board.getRoom('G').getName() );
+		assertEquals("Game Development", board.getRoom('G').getName() );
 		assertEquals("Database Management", board.getRoom('M').getName() );
 		assertEquals("Chemistry", board.getRoom('C').getName() );
 		assertEquals("Physics", board.getRoom('H').getName() );
@@ -91,8 +91,9 @@ public class FileInitTests {
 		for (int row = 0; row < board.getNumRows(); row++)
 			for (int col = 0; col < board.getNumColumns(); col++) {
 				BoardCell cell = board.getCell(row, col);
-				if (cell.isDoorway())
+				if (cell.isDoorway()) {
 					numDoors++;
+				}
 			}
 		Assert.assertEquals(11, numDoors);
 	}
diff --git a/src/tests/Room.java b/src/tests/Room.java
index d054001..85faee9 100644
--- a/src/tests/Room.java
+++ b/src/tests/Room.java
@@ -5,8 +5,9 @@ public class Room {
 	private BoardCell centerCell;
 	private BoardCell labelCell;
 	
-	public Room() {
-		
+	public Room(String name) {
+		super();
+		this.name = name;
 	}
 	
 	public String getName() {
@@ -15,12 +16,22 @@ public class Room {
 
 	public BoardCell getLabelCell() {
 		// TODO Auto-generated method stub
-		return null;
+		return labelCell;
+	}
+	
+	public void setLabelCell(BoardCell cell) {
+		// TODO Auto-generated method stub
+		this.labelCell = cell;
+	}
+	
+	public void setCenterCell(BoardCell cell) {
+		// TODO Auto-generated method stub
+		this.centerCell = cell;
 	}
 
 	public BoardCell getCenterCell() {
 		// TODO Auto-generated method stub
-		return null;
+		return centerCell;
 	}
 
 }
